package coverage

import (
	"os"
	"testing"
	"time"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func TestPeople_Len(t *testing.T) {
	expected := 2
	got := People {
		{ firstName: "B", lastName: "B", birthDay: time.Now() },
		{ firstName: "A", lastName: "B", birthDay: time.Now() },
	}.Len()
	if expected != got {
		t.Errorf("Expected %d, got %d", expected, got)
	}
}

func TestPeople_Less_Birthday(t *testing.T) {
	expected := true
	birthDay := time.Now()
	got := People {
		{ firstName: "A", lastName: "B", birthDay: birthDay },
		{ firstName: "A", lastName: "B", birthDay: birthDay.Add(time.Hour) },
	}.Less(1,0)
	if expected != got {
		t.Errorf("Expected %t, got %t", expected, got)
	}
}

func TestPeople_Less_Firstname(t *testing.T) {
	expected := true
	birthDay := time.Now()
	got := People {
		{ firstName: "B", lastName: "B", birthDay: birthDay },
		{ firstName: "A", lastName: "B", birthDay: birthDay },
	}.Less(1,0)
	if expected != got {
		t.Errorf("Expected %t, got %t", expected, got)
	}
}

func TestPeople_Less_Secondname(t *testing.T) {
	expected := true
	birthDay := time.Now()
	got := People {
		{ firstName: "A", lastName: "B", birthDay: birthDay },
		{ firstName: "A", lastName: "A", birthDay: birthDay },
	}.Less(1,0)
	if expected != got {
		t.Errorf("Expected %t, got %t", expected, got)
	}
}

func TestPeople_Swap(t *testing.T) {
	birthDay := time.Now()
	origin := People{
		{ firstName: "A", lastName: "A", birthDay: birthDay.Add(time.Hour) },
		{ firstName: "B", lastName: "B", birthDay: birthDay },
	}
	origin.Swap(0, 1)
	expected := People{
		{ firstName: "B", lastName: "B", birthDay: birthDay },
		{ firstName: "A", lastName: "A", birthDay: birthDay.Add(time.Hour) },
	}
	if expected[0] != origin[0] || expected[1] != origin[1] {
		t.Errorf("Expected %+v, got %+v", expected, origin)
	}
}

var (
	expectedMatrix = Matrix{
		rows: 3,
		cols: 3,
		data: []int{1,2,3,4,5,6,7,8,9},
	}
)

func TestNew_Matrix(t *testing.T) {
	matrixStr := `1 2 3
				  4 5 6
				  7 8 9`
	gotMatrix, err := New(matrixStr)
	if err != nil {
		t.Errorf("Error while creating gotMatrix: %s", err.Error())
	}
	if expectedMatrix.rows != gotMatrix.rows {
		t.Errorf("Expected rows %d, got %d", expectedMatrix.rows, gotMatrix.rows)
	} else if expectedMatrix.cols != gotMatrix.cols {
		t.Errorf("Expected cols %d, got %d", expectedMatrix.cols, gotMatrix.cols)
	}
	for i, v := range gotMatrix.data {
		if expectedMatrix.data[i] != v {
			t.Errorf("Expected value %d, got %d", expectedMatrix.data[i], v)
		}
	}
}

func TestNew_ColsWrong(t *testing.T)  {
	matrixStr := `1 2 3
				  4 5
				  7`
	_, err := New(matrixStr)
	if err == nil {
		t.Errorf("No error while creating non-square matrix")
	}
}

func TestNew_DataWrong(t *testing.T)  {
	matrixStr := `1 2
				  a 4`
	_, err := New(matrixStr)
	if err == nil {
		t.Errorf("No error while creating matrix with non-digit character")
	}
}

func TestMatrix_Rows(t *testing.T) {
	matrixStr := `1 2
				  3 4`
	expectedRows := [][]int {{1,2}, {3,4}}
	gotMatrix, err := New(matrixStr)
	if err != nil {
		t.Errorf("Error while creating gotMatrix: %s", err.Error())
	}
	for i, row  := range gotMatrix.Rows() {
		for j, v := range row {
			if expectedRows[i][j] != v {
				t.Errorf("Expected value %d, got %d", expectedRows[i][j], v)
			}
		}
	}
}

func TestMatrix_Cols(t *testing.T) {
	matrixStr := `1 2
				  3 4`
	expectedCols := [][]int {{1,3}, {2,4}}
	gotMatrix, err := New(matrixStr)
	if err != nil {
		t.Errorf("Error while creating gotMatrix: %s", err.Error())
	}
	for i, row  := range gotMatrix.Cols() {
		for j, v := range row {
			if expectedCols[i][j] != v {
				t.Errorf("Expected value %d, got %d", expectedCols[i][j], v)
			}
		}
	}
}

func TestMatrix_Set(t *testing.T) {
	matrixStr := `1 2
				  3 4`
	expectedMatrix := []int {1,3,3,4}
	excpectedIndex := 1
	gotMatrix, err := New(matrixStr)
	if err != nil {
		t.Errorf("Error while creating gotMatrix: %s", err.Error())
	}
	if !gotMatrix.Set(0, excpectedIndex, 3) {
		t.Errorf("Something went wrong while set matrix")
	}
	if expectedMatrix[excpectedIndex] != gotMatrix.data[excpectedIndex] {
		t.Errorf("Expected value %d, got %d", expectedMatrix[excpectedIndex], gotMatrix.data[excpectedIndex])
	}
}

func TestMatrix_Set_RowsLessZero(t *testing.T) {
	matrixStr := `1 2
				  3 4`
	gotMatrix, err := New(matrixStr)
	if err != nil {
		t.Errorf("Error while creating gotMatrix: %s", err.Error())
	}
	if gotMatrix.Set(-1, 1,3) {
		t.Errorf("Set func was successfully completed with row < 0")
	}
}

func TestMatrix_Set_RowMoreThanMust(t *testing.T) {
	matrixStr := `1 2
				  3 4`
	gotMatrix, err := New(matrixStr)
	if err != nil {
		t.Errorf("Error while creating gotMatrix: %s", err.Error())
	}
	row := 1
	if !gotMatrix.Set(row, 1,3) {
		t.Errorf("Set func was successfully completed for row %d, but matrix has only %d rows", row, gotMatrix.rows)
	}
}